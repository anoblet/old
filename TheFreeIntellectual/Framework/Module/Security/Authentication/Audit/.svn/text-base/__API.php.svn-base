<?PHP
    NameSpace System\Security\Authentication\Audit
    {
        /**
        * @internal This seems like an instruction object.
        * Should it be seperate from other types of objects
        * (Ones which don't define Public/External parameters)?
        */
        Class __API
        {
            Public Function Process_Login($Object)
            {                             
                $Username = $Object->Username;
                $Password = $Object->Password;
                $this->Debug[] = "Processing Login...";
                Try
                {
                    /**
                    * @todo Create abstract authentication mechanism.
                    */
                    $this->Authentication   =   New \System\Security\Authentication\Audit\Interfaces\MySQL;
                    $this->Authentication->Authenticate($Username,$Password);                   
                    If($this->Authentication->Result)
                    {   
                        $this->Debug[] = "We were able to authenticate."; 
                    }
                    Else
                    {   
                        $this->Debug[] = "We were unable to authenticate."; 
                        \System\Module\Session\__API::Increment_Parameter('Authentication_Attempts');  
                        Throw New \Exception ("Unable to authenticate via MySQL");
                    }
                    \System\Security\Authentication\__API::Update_Authentication_Status(TRUE);
                }
                Catch(\Exception $Exception)
                {
                    $Object->Result =   FALSE;
                    $Object->Exception  =   $Exception;
                }
                
                Return $this;
            }
            Public Function Authenticate($Username,$Password)
            {
                // Create the Datasource Object
                $Datasource =   \System\Module\Datasource\__API::Generate_Object('Database\MySQL');   
                $SubRoutine =   \System\Library\XML\__Interface::Convert_to_Object(BASE_DIRECTORY . '/System/Module/Quotes/Repositories/localhost.localdomain.xml');                                                                         
                If($SubRoutine->Result)
                {                                                                                                                                             +
                            $Datasource->Configuration  = $SubRoutine->Data;
                } 
                // Generate the connection 
                $Datasource->Connection =   $Datasource->Generate_Connection($Datasource->Configuration); 
                // Generate the Query
                $Parameters->Database    =   "SYSTEM";  
                $Parameters->Table = "Users";
                $Parameters->Fields = Array('Object_ID');
                $Parameters->Filters = Array("Username" => $Username,"Password" => $Password);
                $Parameters->Limit = 1;
                // $Query = "SELECT ID FROM `USERS`.`SYSTEM` WHERE `User_Handle`={$User_Handle} AND User_Password={$User_Password}";

                // Retrieve the result //
                Try
                {
                    
                    $SubRoutine = \System\Module\Datasource\Database\MySQL\__API::Retrieve($Datasource->Connection,$Parameters);
                    If($SubRoutine->Result)
                    {
                        $this->Result    =    TRUE;
                    }
                    
                    Else
                    {
                        $this->Result    =    FALSE;
                        $this->Debug     =    "Username: {$Username} and Passwowrd: {$Password} combination not found.";
                        Throw New \Exception;
                    }
                }
                Catch (\Exception $Exception)
                {
                    $Object->Result =   FALSE; 
                    $Object->Exception =   $Exception;
                }
                // Retrieve The Result //
                
                Return TRUE;
            }
        }
    }
  
?>
